//This code was generated by a tool.
//Changes to this file will be lost if the code is regenerated.
// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
using System.Data.SQLite;
using System;
using System.Collections.Generic;
using ConsoleAppSQLiteTest.Model;
using System.Numerics;
using System.IO;
using Newtonsoft.Json;


namespace Model
{
    public class SQLiteDb
    {
        private SQLiteConnection _conn;
        public SQLiteDb(string dbfile)
        {
            // get the application path
            string path = AppDomain.CurrentDomain.BaseDirectory;
            SQLiteConnection db = new SQLiteConnection($"Data Source={path}mydb.db");
            _conn = db;
            db.Open();
        }


        public void CloseConnection()
        {
            _conn.Close();
        }


        public List<task> readTasks(string tablename) 
        {
           
            List<task> tasks = new List<task>(); 

            using (SQLiteCommand cmd = new SQLiteCommand($"SELECT * FROM {tablename}", _conn))
            {
                using (SQLiteDataReader rdr = cmd.ExecuteReader())
                {
                    while (rdr.Read())
                    {
                       task tsk = new task();
                        // convert a bigint to an int
                        tsk.id = (int)(Int64)rdr[0];
                        tsk.text = (string)rdr[1];
                        tasks.Add(tsk);
                    }
                }
            }
            return tasks;
        }

        public void exportTableJSON(List<task> data) 
        {
            // export a tasks to JSON
            string path = AppDomain.CurrentDomain.BaseDirectory;
            string json = JsonConvert.SerializeObject(data, Formatting.Indented);
            File.WriteAllText($"{path}taks.json", json);

        }

    }
    
}
